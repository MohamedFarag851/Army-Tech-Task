@model ArmyTechTask.Models.View_Models.StudentViewModel
@{
    ViewBag.Title = "Create";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Student</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Student.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Student.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Student.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Student.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Student.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Student.BirthDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Student.Governorate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Student.GovernorateId, new SelectList(Model.Governorates, "ID", "Name"), "Select Governorate", new { id = "ddshowGov", @class = "form-control" })

                @Html.ValidationMessageFor(model => model.Student.Governorate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Student.Neighborhood, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Student.NeighborhoodId, new SelectList(Model.Neighborhoods, "ID", "Name"), "Select Neighbourhood", new { id = "ddshowNei", @class = "form-control" })

                @Html.ValidationMessageFor(model => model.Student.Neighborhood, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Student.Field, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Student.FieldId, new SelectList(Model.Fields, "ID", "Name"), "Select Field", new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.Student.Field, "", new { @class = "text-danger" })
            </div>
        </div>

       
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>


    <script type="text/javascript">

        $(document).ready(function () {
            //Dropdownlist Selectedchange event
            $("#ddshowGov").change(function () {
                console.log("aloooo");
                $("#ddshowNei").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetNeighborhoods")',
                    dataType: 'json',
                    data: { id: $("#ddshowGov").val() },
                    success: function (mems) {
                        console.log("aywaaaa");
                        // states contains the JSON formatted list
                        // of states passed from the controller
                        $.each(mems, function (i, member) {
                            $("#ddshowNei").append('<option value="'
    + member.Value + '">'
    + member.Text + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed to retrieve neighborhoods.' + ex);
                    }
                });
                return false;
            })
        });
    </script>
    @Scripts.Render("~/bundles/jqueryval")


}